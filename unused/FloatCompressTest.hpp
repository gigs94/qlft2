#include <cpptest.h>
#include <FloatCompress.h>
#include <vector>
#include <iostream>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>

class FloatCompressTest : public Test::Suite { 

std::vector<std::string> values{ "-3.34","-3.25","-3.24","-3.23","-3.22","-3.2","-3.19","-3.18","-3.17","-3.16","-3.15","-3.14","-3.1","-3.09","-3.05","-3.04","-3","-2.99","-2.9","0.7275","0.73","0.735","0.74","0.75","0.76","0.765","0.77","0.78","0.79","0.8","0.81","0.815","0.82","0.83","0.84","0.84095","0.841","0.84105","0.8411","0.84115","0.84135","0.8414","0.84141","0.84144","0.84145","0.84147","0.84148","0.84151","0.84154","0.84155","0.84156","0.84158","0.8416","0.84161","0.84165","0.8417","0.84175","0.84177","0.8418","0.84182","0.84183","0.84184","0.84185","0.84186","0.84188","0.84189","0.8419","0.84191","0.84192","0.84194","0.84195","0.84197","0.84198","0.842","0.84202","0.84205","0.84209","0.8421","0.84212","0.84213","0.84214","0.84215","0.84216","0.84217","0.84218","0.84219","0.8422","0.84221","0.84222","0.84223","0.84224","0.84225","0.84226","0.84227","0.84228","0.84229","0.8423","0.84231","0.84232","0.84233","0.84234","0.84235","0.84236","0.84237","0.84238","0.84239","0.8424","0.84241","0.84242","0.84243","0.84244","0.84245","0.84246","0.84247","0.84248","0.84249","0.8425","0.84251","0.84252","0.84254","0.84255","0.84256","0.84257","0.84258","0.84259","0.8426","0.84261","0.84262","0.84263","0.84264","0.84265","0.84266","0.84267","0.84268","0.84269","0.8427","0.84271","0.84272","0.84273","0.84274","0.84275","0.84276","0.84277","0.84278","0.84279","0.8428","0.84281","0.84282","0.84283","0.84284","0.84285","0.84286","0.84287","0.84289","0.8429","0.84291","0.84292","0.84293","0.84294","0.84295","0.84296","0.843","0.84305","0.84307","0.84308","0.8431","0.84311","0.84312","0.84313","0.84315","0.84316","0.84317","0.84318","0.8432","0.84321","0.84322","0.84323","0.84332","0.84336","0.84338","0.8434","0.84361","0.8482","0.84825","0.8483","0.84835","0.84845","0.8485","0.84851","0.84853","0.84854","0.84855","0.84856","0.84857","0.84858","0.84859","0.8486","0.84861","0.84862","0.84863","0.84864","0.84865","0.84866","0.84867","0.84868","0.84869","0.8487","0.84871","0.84872","0.84873","0.84874","0.84875","0.8488","0.84882","0.84885","0.8489","0.84892","0.84895","0.849","0.84902","0.84905","0.84906","0.8491","0.84912","0.84913","0.84915","0.84916","0.84917","1464.6","1464.7","1464.8","1464.9","1465","1465.1","1465.2","1465.3","1465.4","1465.5","1467.8","1479.5","1480","1480.5","1482.5","1483","1483.5","1484","1484.5","1485","1490","1705","1706.25","1707.5","1708.75","1710","1711.25","1712.5","1713.75","1715","1716.25","1717.5","1718.75","1720","1721.25","1722.5","1723.75","1725","1726.25","1727.5","1775.5","1775.75","1776","1776.5","1776.75","1777","1777.5","1777.75","1778","1778.25","1778.5","1778.75","1779","1779.25","1779.5","1779.75","1780","1780.25","1780.5","1780.75","1781","1781.25","1781.5","1781.75","1782","1782.25","1782.5","1782.75","1783","1783.25","1783.5","1783.75","1784","1784.25","1784.5","1784.75","1785","1785.25","1785.5","1785.75","1786","1786.25","1786.5","1786.75","1787","1787.25","1787.5","1787.75","1788","1788.25","1788.5","1788.75","1789","1789.25","1789.5","1789.75","1790","1790.25","1790.5","1790.75","1791","1791.25","1791.5","1791.75","1792","1792.25","1792.5","1792.75","1793","1793.25","1793.5","1793.75","1794","1794.25","1794.5","1794.75","1795","1795.25","1795.5","1795.75","1796","1796.25","1796.5","1796.75","1797","1797.25","1797.5","1797.75","1798" };

std::vector<int64_t> expected_results{-334000, -325000, -324000, -323000, -322000, -320000, -319000, -318000, -317000, -316000, -315000, -314000, -310000, -309000, -305000, -304000, -300000, -299000, -290000, 72750, 73000, 73500, 74000, 75000, 76000, 76500, 77000, 78000, 79000, 80000, 81000, 81500, 82000, 83000, 84000, 84095, 84100, 84105, 84110, 84115, 84135, 84140, 84141, 84144, 84145, 84147, 84148, 84151, 84154, 84155, 84156, 84158, 84160, 84161, 84165, 84170, 84175, 84177, 84180, 84182, 84183, 84184, 84185, 84186, 84188, 84189, 84190, 84191, 84192, 84194, 84195, 84197, 84198, 84200, 84202, 84205, 84209, 84210, 84212, 84213, 84214, 84215, 84216, 84217, 84218, 84219, 84220, 84221, 84222, 84223, 84224, 84225, 84226, 84227, 84228, 84229, 84230, 84231, 84232, 84233, 84234, 84235, 84236, 84237, 84238, 84239, 84240, 84241, 84242, 84243, 84244, 84245, 84246, 84247, 84248, 84249, 84250, 84251, 84252, 84254, 84255, 84256, 84257, 84258, 84259, 84260, 84261, 84262, 84263, 84264, 84265, 84266, 84267, 84268, 84269, 84270, 84271, 84272, 84273, 84274, 84275, 84276, 84277, 84278, 84279, 84280, 84281, 84282, 84283, 84284, 84285, 84286, 84287, 84289, 84290, 84291, 84292, 84293, 84294, 84295, 84296, 84300, 84305, 84307, 84308, 84310, 84311, 84312, 84313, 84315, 84316, 84317, 84318, 84320, 84321, 84322, 84323, 84332, 84336, 84338, 84340, 84361, 84820, 84825, 84830, 84835, 84845, 84850, 84851, 84853, 84854, 84855, 84856, 84857, 84858, 84859, 84860, 84861, 84862, 84863, 84864, 84865, 84866, 84867, 84868, 84869, 84870, 84871, 84872, 84873, 84874, 84875, 84880, 84882, 84885, 84890, 84892, 84895, 84900, 84902, 84905, 84906, 84910, 84912, 84913, 84915, 84916, 84917, 146460000, 146470000, 146480000, 146490000, 146500000, 146510000, 146520000, 146530000, 146540000, 146550000, 146780000, 147950000, 148000000, 148050000, 148250000, 148300000, 148350000, 148400000, 148450000, 148500000, 149000000, 170500000, 170625000, 170750000, 170875000, 171000000, 171125000, 171250000, 171375000, 171500000, 171625000, 171750000, 171875000, 172000000, 172125000, 172250000, 172375000, 172500000, 172625000, 172750000, 177550000, 177575000, 177600000, 177650000, 177675000, 177700000, 177750000, 177775000, 177800000, 177825000, 177850000, 177875000, 177900000, 177925000, 177950000, 177975000, 178000000, 178025000, 178050000, 178075000, 178100000, 178125000, 178150000, 178175000, 178200000, 178225000, 178250000, 178275000, 178300000, 178325000, 178350000, 178375000, 178400000, 178425000, 178450000, 178475000, 178500000, 178525000, 178550000, 178575000, 178600000, 178625000, 178650000, 178675000, 178700000, 178725000, 178750000, 178775000, 178800000, 178825000, 178850000, 178875000, 178900000, 178925000, 178950000, 178975000, 179000000, 179025000, 179050000, 179075000, 179100000, 179125000, 179150000, 179175000, 179200000, 179225000, 179250000, 179275000, 179300000, 179325000, 179350000, 179375000, 179400000, 179425000, 179450000, 179475000, 179500000, 179525000, 179550000, 179575000, 179600000, 179625000, 179650000, 179675000, 179700000, 179725000, 179750000, 179775000, 179800000};



    void sigDigitsTest() {
        int sigDigits = findSigDigits(values);
        TEST_ASSERT_EQUALS(5,sigDigits)
    };

    void stripOutDecimals() {
        std::vector<int64_t> results = ::stripOutDecimals(values, 5);

for (auto x:results){
std::cout << x << "   ";
}


        TEST_ASSERT(results == expected_results);
    };

    void reconstitute() {
        std::vector<std::string> results = ::reconstitute(expected_results, 5);

        TEST_ASSERT(results == values);
    };

    public: 
      FloatCompressTest( ) {
         TEST_ADD(FloatCompressTest::sigDigitsTest);
         TEST_ADD(FloatCompressTest::stripOutDecimals);
         TEST_ADD(FloatCompressTest::reconstitute);
      } 

}; 
